# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key=":1Bc459DD;9vaGtM/Fr_63K1Ii>xw5<3Iv^kWEvxmDf89K/NS@17OUD3unTAPB09"
play.http.secret.key=${?PLAY_CRYPTO_SECRET}

play.http.session.httpOnly = true
play.http.session.secure = true
play.http.session.secure = ${?PLAY_HTTP_SESSION_SECURE}

# The max content length for uploads
play.http.parser.maxDiskBuffer = 500 MB

# The increased timeout for uploads
play.ws.timeout.idle = 15 minutes
play.ws.timeout.request = 15 minutes

play.http.errorHandler = "OtaPlusErrorHandler"

play.http.filters="OtaPlusFilters"

play.filters.headers.frameOptions = "SAMEORIGIN"

play.modules.enabled += "com.advancedtelematic.auth.oidc.OidcModule"
play.modules.enabled += "play.filters.csrf.CSRFModule"

oidc {
  namespace = "default"
  namespace = ${?OIDC_NAMESPACE}
  namespaceProvider = "com.advancedtelematic.auth.oidc.NamespaceFromIdentity"
  namespaceProvider = ${?OIDC_NS_PROVIDER}
  loginAction = "com.advancedtelematic.auth.garage.LoginAction"
  loginAction = ${?OIDC_LOGIN_ACTION}
  tokenExchange = "com.advancedtelematic.auth.garage.AuthPlusTokenExchange"
  tokenExchange = ${?OIDC_TOKEN_EXCHANGE}
  tokenVerification = "com.advancedtelematic.auth.oidc.TokenIntrospection"
  tokenVerification = ${?OIDC_TOKEN_VERIFICATION}
  # Other possible values:
  #  namespaceProvider = "com.advancedtelematic.auth.oidc.ConfiguredNamespace"
  #  loginAction = "com.advancedtelematic.auth.oidc.LoginAction"
  #  tokenExchange = "com.advancedtelematic.auth.NoExchange"
  #  tokenVerification = "com.advancedtelematic.auth.oidc.TokenValidityCheck"
}


websrc {
  atsgarage = "wss://*.atsgarage.com:8080"
  auth0 = "cdn.auth0.com"
  auth0src = "https://cdn.auth0.com https://cdn.eu.auth0.com https://"${oauth.domain}
  bootstrapcdn = "maxcdn.bootstrapcdn.com"
  githubusercontent = "https://*.githubusercontent.com"
  googleapis = "ajax.googleapis.com"
  googleusercontent = "https://*.googleusercontent.com"
  gravatar = "https://*.gravatar.com"
  wp = "https://*.wp.com"

  default = "default-src 'self'"
  script = "script-src 'self' "${websrc.auth0src}
  style = "style-src 'unsafe-inline' 'self' "${websrc.bootstrapcdn}
  font = "font-src 'self' data: "${websrc.auth0}" "${websrc.bootstrapcdn}
  img = "img-src 'self' data: "${websrc.auth0}" "${websrc.gravatar}" "${websrc.githubusercontent}" "${websrc.googleusercontent}" "${websrc.wp}
  connect = "connect-src 'self' "${websrc.atsgarage}" https://"${oauth.domain} ${?EXTRA_CONNECT_SRC}
}

play.filters.headers {
  contentSecurityPolicy = ${websrc.default}"; "${websrc.script}"; "${websrc.style}"; "${websrc.font}"; "${websrc.img}"; "${websrc.connect}
}


# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

play {
  server {
    #disable pidfile so the webserver plays nice with docker
    pidfile.path = "/dev/null"
  }
}

packages = {
  versionFormat = """.+"""
  versionFormat = ${?PACKAGES_VERSION_FORMAT}
}


# Remote APIs
auditor = {
  host = "localhost"
  host = ${?AUDITOR_HOST}
  port = 8086
  port = ${?AUDITOR_PORT}
  scheme = "http"
  scheme = ${?AUDITOR_SCHEME}
  uri = ${auditor.scheme}"://"${?auditor.host}":"${auditor.port}
}

authplus {
  host = "localhost"
  host = ${?AUTH_PLUS_HOST}
  port = 9001
  port = ${?AUTH_PLUS_PORT}
  scheme = "http"
  scheme = ${?AUTH_PLUS_SCHEME}
  uri = ${authplus.scheme}"://"${authplus.host}":"${authplus.port}
  client_id = ""
  client_id = ${?AUTHPLUS_CLIENT_ID}
  secret = ""
  secret = ${?AUTHPLUS_SECRET}

  token_verify = false
  token_verify = ${?AUTHPLUS_TOKEN_VERIFY}

  usersPath = "/users"
}

buildservice = {
  host = "localhost"
  host = ${?BUILDER_HOST}
  port = 9200
  port = ${?BUILDER_PORT}
  scheme = "http"
  scheme = ${?BUILDER_SCHEME}
  uri = ${buildservice.scheme}"://"${?buildservice.host}":"${buildservice.port}
  # placeholders to be supplied by the app: [vin] , [packagetype] , [arch] , [client_id] , [secret]
  query = "/api/build/[vin]?client_id=[client_id]&secret=[secret]&packagetype=[packagetype]"
  query = ${?BUILDSERVICE_API_QUERY}
}

campaigner = {
  host = "localhost"
  host = ${?CAMPAIGNER_HOST}
  port = 8080
  port = ${?CAMPAIGNER_PORT}
  scheme = "http"
  scheme = ${?CAMPAIGNER_SCHEME}
  uri = ${campaigner.scheme}"://"${?campaigner.host}":"${campaigner.port}
}

core = {
  host = "localhost"
  host = ${?SOTA_CORE_HOST}
  port = 8080
  port = ${?SOTA_CORE_PORT}
  scheme = "http"
  scheme = ${?SOTA_CORE_SCHEME}
  uri = ${core.scheme}"://"${?core.host}":"${core.port}
}

crypt {
  host = "localhost"
  host = ${?CRYPT_HOST}
  port = 9002
  port = ${?CRYPT_PORT}
  scheme = "http"
  scheme = ${?CRYPT_SCHEME}
  uri = ${crypt.scheme}"://"${?crypt.host}":"${crypt.port}

  gateway {
    port = 8000
    port = ${?DEVICE_GATEWAY_PORT}
  }
}

deviceregistry = {
  host = "localhost"
  host = ${?DEVICE_REGISTRY_HOST}
  port = 8083
  port = ${?DEVICE_REGISTRY_PORT}
  scheme = "http"
  scheme = ${?DEVICE_REGISTRY_SCHEME}
  uri = ${deviceregistry.scheme}"://"${?deviceregistry.host}":"${deviceregistry.port}
}

director = {
  host = "localhost"
  host = ${?DIRECTOR_HOST}
  port = 8084
  port = ${?DIRECTOR_PORT}
  scheme = "http"
  scheme = ${?DIRECTOR_SCHEME}
  uri = ${director.scheme}"://"${?director.host}":"${director.port}
}

repo = {
  host = "localhost"
  host = ${?TUF_REPOSERVER_HOST}
  port = 80
  port = ${?TUF_REPOSERVER_PORT}
  scheme = "http"
  scheme = ${?TUF_REPOSERVER_SCHEME}
  uri = ${repo.scheme}"://"${repo.host}":"${repo.port}
}

resolver = {
  host = "localhost"
  host = ${?SOTA_RESOLVER_HOST}
  port = 8081
  port = ${?SOTA_RESOLVER_PORT}
  scheme = "http"
  scheme = ${?SOTA_RESOLVER_SCHEME}
  uri = ${resolver.scheme}"://"${?resolver.host}":"${resolver.port}
}

userprofile = {
  host = "localhost"
  host = ${?USER_PROFILE_HOST}
  port = 8085
  port = ${?USER_PROFILE_PORT}
  scheme = "http"
  scheme = ${?USER_PROFILE_SCHEME}
  uri = ${userprofile.scheme}"://"${?userprofile.host}":"${userprofile.port}
}

ws = {
  scheme = "wss"
  scheme = ${?WS_SCHEME}
  host = "localhost"
  host = ${?WS_HOST}
  port = 8080
  port = ${?WS_PORT}
  path = "/api/v1/events/ws"
  path = ${?WS_PATH}
}

# optional AWS endpoint:
# endpoint = "ec2.amazonaws.com"
email.endpoint = ${?EMAIL_ENDPOINT}

email.reset_password {
  sender.email = "noreply@advancedtelematic.com"
  subject = "Ota Plus reset password notification"
  # the first %s gets replaced by the server host, the second by the reset token from auth+
  message_body = "Hi,\n\nUse this link to reset your password: <%s/reset_password/%s>.\n\nRegards,\n\t\tATS"
}

test.webserver.host  = "localhost"
test.webserver.host  = ${?DOCKER_IP}
#the default test port is already specified by scalatest
# must not clash with dockerExposedPorts given in SotaBuild of rvi_sota_server
test.webserver.port  = 9010

signup {
  secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  secret = ${?INVITE_SECRET}
}

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

oauth {
  domain=""
  domain=${?AUTH0_DOMAIN}
  clientSecret=""
  clientSecret=${?AUTH0_CLIENT_SECRET}
  clientId=""
  clientId=${?AUTH0_CLIENT_ID}
  callbackURL=""
  callbackURL=${?AUTH0_CALLBACK_URL}
  userUpdateToken=""
  userUpdateToken=${?AUTH0_USER_UPDATE_TOKEN}
  authorizationParams = {}
}

auth0 {
  dbConnection="Username-Password-Authentication"
  dbConnection=${?AUTH0_DB_CONNECTION}
  audience=""
  audience=${?AUTH0_AUTH_PLUS_CLIENT_ID}
}

api {
  domain = "https://www.atsgarage.com/api"
  scopes = [
      ${api.domain}"/campaigns",
      ${api.domain}"/campaigns.readonly",
      ${api.domain}"/devices",
      ${api.domain}"/devices.readonly",
      ${api.domain}"/packages",
      ${api.domain}"/packages.readonly",
      ${api.domain}"/updates",
      ${api.domain}"/updates.readonly"
  ]
}

ui {
  toggle {
    autoFeatureActivation = true
    autoFeatureActivation = ${?TOGGLE_AUTO_FEATURE_ACTIVATION}
    userProfileMenu = true
    userProfileMenu = ${?TOGGLE_USER_PROFILE_MENU}
  }
}

messaging.kafka.groupIdPrefix = "ota-plus-web"
