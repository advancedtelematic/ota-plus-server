# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key=":1Bc459DD;9vaGtM/Fr_63K1Ii>xw5<3Iv^kWEvxmDf89K/NS@17OUD3unTAPB09"
play.http.secret.key=${?PLAY_CRYPTO_SECRET}

play.http.session.httpOnly = true
play.http.session.secure = true
play.http.session.secure = ${?PLAY_HTTP_SESSION_SECURE}

# The max content length for uploads
play.http.parser.maxDiskBuffer = 500 MB
play.http.parser.maxDiskBuffer = ${?PLAY_HTTP_PARSER_MAX_DISK_BUFFER}

# The increased timeout for uploads
play.ws.timeout.idle = 15 minutes
play.ws.timeout.idle = ${?PLAY_WS_TIMEOUT_IDLE}
play.ws.timeout.request = 15 minutes
play.ws.timeout.request = ${?PLAY_WS_TIMEOUT_REQUEST}

play.http.errorHandler = "OtaPlusErrorHandler"

play.server.netty.maxHeaderSize = 20480
play.server.netty.maxHeaderSize = ${?PLAY_SERVER_NETTY_MAX_HEADER_SIZE}

play.http.filters="OtaPlusFilters"

play.filters.headers.frameOptions = "SAMEORIGIN"

play.modules.enabled += "com.advancedtelematic.auth.oidc.OidcModule"
play.modules.enabled += "com.advancedtelematic.cache.ActorBasedCacheModule"
play.modules.enabled += "com.advancedtelematic.LoggingActorModule"
play.modules.enabled += "play.filters.csrf.CSRFModule"

oidc {
  namespace = "default"
  namespace = ${?OIDC_NAMESPACE}
  namespaceProvider = "com.advancedtelematic.auth.oidc.NamespaceFromUserProfile"
  namespaceProvider = ${?OIDC_NS_PROVIDER}
  loginAction = "com.advancedtelematic.auth.garage.LoginAction"
  loginAction = ${?OIDC_LOGIN_ACTION}
  logoutAction = "com.advancedtelematic.auth.garage.LogoutAction"
  logoutAction = ${?OIDC_LOGOUT_ACTION}
  tokenExchange = "com.advancedtelematic.auth.NoExchange"
  tokenExchange = ${?OIDC_TOKEN_EXCHANGE}
  # Other possible values:
  #  namespaceProvider = "com.advancedtelematic.auth.oidc.ConfiguredNamespace"
  #  loginAction = "com.advancedtelematic.auth.oidc.LoginAction"
  #  loginAction = "com.advancedtelematic.auth.garage.NoLoginAction"
  #  logoutAction = "com.advancedtelematic.auth.garage.NoLogoutAction"
  #  tokenExchange = "com.advancedtelematic.auth.garage.AuthPlusTokenExchange"
  configUrl = "https://ats-dev.eu.auth0.com/"
  configUrl = ${?OIDC_CONFIG_URL}
  issuer = ${oidc.configUrl}
  issuer = ${?OIDC_ISSUER}
  keyset = null
  keyset = ${?OIDC_KEYSET}
  configurationTtl = 1h
  keysTtl = 10 m
  fallback {
    issuer = "https://ats-dev.eu.auth0.com/"
    issuer = ${?OIDC_ISSUER}
    authzEndpoint = ${oidc.fallback.issuer}"authorize"
    tokenEndpoint = ${oidc.fallback.issuer}"token"
    jwksUri = ${oidc.fallback.issuer}".well-known/jwks.json"
    userInfoEndpoint = ${oidc.fallback.issuer}"userinfo"
  }
  clientAuthentication = "PasswordRequestBody"
  clientAuthentication = ${?OIDC_CLIENT_AUTHENTICATION}
}


websrc {
  atsgarage = "wss://*.atsgarage.com:8080"
  auth0 = "cdn.auth0.com"
  auth0src = "https://cdn.auth0.com https://cdn.eu.auth0.com https://"${oauth.domain}
  bootstrapcdn = "maxcdn.bootstrapcdn.com"
  githubusercontent = "https://*.githubusercontent.com"
  googleapis = "ajax.googleapis.com"
  googleusercontent = "https://*.googleusercontent.com"
  gravatar = "https://*.gravatar.com"
  iplookup = "https://wego.here.com/services/iplookup/"
  sheredeutschlandgmbh = "https://sheredeutschlandgmbh.d1.sc.omtrdc.net"
  tiqcdn = "https://tags.tiqcdn.com"
  wp = "https://*.wp.com"

  default = "default-src 'self'"
  script = "script-src 'self' 'unsafe-eval' " ${websrc.auth0src}" "${?dev.scriptSrc}" "${websrc.tiqcdn} 'self' 'unsafe-inline'" "${websrc.iplookup}" "
  style = "style-src 'unsafe-inline' 'self' "${websrc.bootstrapcdn}" "${websrc.tiqcdn}
  font = "font-src 'self' data: "${websrc.auth0}" "${websrc.bootstrapcdn}
  img = "img-src 'self' data: "${websrc.auth0}" "${websrc.gravatar}" "${websrc.githubusercontent}" "${websrc.googleusercontent}" "${websrc.wp}" "${websrc.sheredeutschlandgmbh}
  connect = "connect-src 'self' "${websrc.atsgarage}"  https://"${oauth.domain} ${?EXTRA_CONNECT_SRC}" "${?dev.connectSrc}
}

play.filters.headers {
  contentSecurityPolicy = ${websrc.default}"; "${websrc.script}"; "${websrc.style}"; "${websrc.font}"; "${websrc.img}"; "${websrc.connect}
}


# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

play {
  server {
    #disable pidfile so the webserver plays nice with docker
    pidfile.path = "/dev/null"
  }
}

packages = {
  versionFormat = """.+"""
  versionFormat = ${?PACKAGES_VERSION_FORMAT}
}


# Remote APIs
auditor = {
  host = ${?AUDITOR_HOST}
  port = ${?AUDITOR_PORT}
  scheme = "http"
  scheme = ${?AUDITOR_SCHEME}
  uri = ${auditor.scheme}"://"${?auditor.host}":"${?auditor.port}
}

authplus {
  host = ${?AUTH_PLUS_HOST}
  port = ${?AUTH_PLUS_PORT}
  scheme = "http"
  scheme = ${?AUTH_PLUS_SCHEME}
  uri = ${authplus.scheme}"://"${?authplus.host}":"${?authplus.port}
  client_id = ""
  client_id = ${?AUTHPLUS_CLIENT_ID}
  secret = ""
  secret = ${?AUTHPLUS_SECRET}

  token_verify = false
  token_verify = ${?AUTHPLUS_TOKEN_VERIFY}

  token = ""
  token = ${?JWT_SECRET}

  usersPath = "/users"
}

campaigner = {
  host = ${?CAMPAIGNER_HOST}
  port = ${?CAMPAIGNER_PORT}
  scheme = "http"
  scheme = ${?CAMPAIGNER_SCHEME}
  uri = ${campaigner.scheme}"://"${?campaigner.host}":"${?campaigner.port}
}

crypt {
  host = ${?CRYPT_HOST}
  port = ${?CRYPT_PORT}
  scheme = "http"
  scheme = ${?CRYPT_SCHEME}
  uri = ${crypt.scheme}"://"${?crypt.host}":"${?crypt.port}

  gateway {
    port = 8000
    port = ${?DEVICE_GATEWAY_PORT}
  }
}

deviceregistry = {
  host = ${?DEVICE_REGISTRY_HOST}
  port = ${?DEVICE_REGISTRY_PORT}
  scheme = "http"
  scheme = ${?DEVICE_REGISTRY_SCHEME}
  uri = ${deviceregistry.scheme}"://"${?deviceregistry.host}":"${?deviceregistry.port}
}

director = {
  host = ${?DIRECTOR_HOST}
  port = ${?DIRECTOR_PORT}
  scheme = "http"
  scheme = ${?DIRECTOR_SCHEME}
  uri = ${director.scheme}"://"${?director.host}":"${?director.port}
}

directorV2 = {
  host = "localhost"
  host = ${?DIRECTORV2_HOST}
  port = 9001
  port = ${?DIRECTORV2_PORT}
  scheme = "http"
  scheme = ${?DIRECTORV2_SCHEME}
  uri = ${director.scheme}"://"${?directorV2.host}":"${?directorV2.port}
}

repo = {
  host = ${?TUF_REPOSERVER_HOST}
  port = ${?TUF_REPOSERVER_PORT}
  scheme = "http"
  scheme = ${?TUF_REPOSERVER_SCHEME}
  uri = ${repo.scheme}"://"${?repo.host}":"${?repo.port}

  pub = {
    host = ${?TUF_REPOSERVER_HOST_PUB}
    port = ${?TUF_REPOSERVER_PORT_PUB}
    scheme = "http"
    scheme = ${?TUF_REPOSERVER_SCHEME_PUB}
    uri = ${repo.pub.scheme}"://"${?repo.pub.host}":"${?repo.pub.port}
  }
}

keyserver = {
  host = ${?TUF_KEYSERVER_HOST}
  port = ${?TUF_KEYSERVER_PORT}
  scheme = "http"
  scheme = ${?TUF_KEYSERVER_SCHEME}
  uri = ${keyserver.scheme}"://"${?keyserver.host}":"${?keyserver.port}
}

api_gateway = {
  host = ${?API_GATEWAY_HOST}
  port = ${?API_GATEWAY_PORT}
  scheme = "http"
  scheme = ${?API_GATEWAY_SCHEME}
  uri = ${api_gateway.scheme}"://"${?api_gateway.host}":"${?api_gateway.port}
}

treehub = {
  pub = {
    host = ${?TREEHUB_HOST_PUB}
    port = ${?TREEHUB_PORT_PUB}
    path = "/api/v3"
    path = ${?TREEHUB_PATH_PUB}
    scheme = "http"
    scheme = ${?TREEHUB_SCHEME_PUB}
    uri = ${treehub.pub.scheme}"://"${?treehub.pub.host}":"${?treehub.pub.port}${?treehub.pub.path}
  }
}

userprofile = {
  host = "ota-user-profile"
  host = ${?USER_PROFILE_HOST}
  port = 80
  port = ${?USER_PROFILE_PORT}
  scheme = "http"
  scheme = ${?USER_PROFILE_SCHEME}
  uri = ${userprofile.scheme}"://"${?userprofile.host}":"${?userprofile.port}
}

ws = {
  scheme = "wss"
  scheme = ${?WS_SCHEME}
  host = "localhost"
  host = ${?WS_HOST}
  port = 8080
  port = ${?WS_PORT}
  path = "/api/v1/events/ws"
  path = ${?WS_PATH}
}

# optional AWS endpoint:
# endpoint = "ec2.amazonaws.com"
email.endpoint = ${?EMAIL_ENDPOINT}

email.reset_password {
  sender.email = "noreply@advancedtelematic.com"
  subject = "Ota Plus reset password notification"
  # the first %s gets replaced by the server host, the second by the reset token from auth+
  message_body = "Hi,\n\nUse this link to reset your password: <%s/reset_password/%s>.\n\nRegards,\n\t\tATS"
}

test.webserver.host  = "localhost"
test.webserver.host  = ${?DOCKER_IP}
#the default test port is already specified by scalatest
# must not clash with dockerExposedPorts given in SotaBuild of rvi_sota_server
test.webserver.port  = 9010

signup {
  secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  secret = ${?INVITE_SECRET}
}

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

oauth {
  domain=""
  domain=${?AUTH0_DOMAIN}
  clientSecret=""
  clientSecret=${?AUTH0_CLIENT_SECRET}
  clientId=""
  clientId=${?AUTH0_CLIENT_ID}
  callbackURL=""
  callbackURL=${?AUTH0_CALLBACK_URL}
  userUpdateToken=""
  userUpdateToken=${?AUTH0_USER_UPDATE_TOKEN}
  authorizationParams = {}
}

auth0 {
  dbConnection="Username-Password-Authentication"
  dbConnection=${?AUTH0_DB_CONNECTION}
  audience="https://"${?authplus.host}
  audience=${?AUTH0_TOKEN_AUDIENCE}
  signUpUrl=""
  signUpUrl=${?AUTH0_SIGN_UP_URL}
}

api {
  domain = "https://www.atsgarage.com/api"
  scopes = [
      ${api.domain}"/campaigns",
      ${api.domain}"/campaigns.readonly",
      ${api.domain}"/devices",
      ${api.domain}"/devices.readonly",
      ${api.domain}"/packages",
      ${api.domain}"/packages.readonly",
      ${api.domain}"/updates",
      ${api.domain}"/updates.readonly"
  ]
}

ui {
  toggle {
    atsGarageTheme = true
    atsGarageTheme = ${?TOGGLE_ATS_GARAGE_THEME}
    autoFeatureActivation = true
    autoFeatureActivation = ${?TOGGLE_AUTO_FEATURE_ACTIVATION}
    credentialsDownload = true
    credentialsDownload = ${?TOGGLE_CREDENTIALS_DOWNLOAD}
    userProfileEdit = true
    userProfileEdit = ${?TOGGLE_USER_PROFILE_EDIT}
    userProfileMenu = true
    userProfileMenu = ${?TOGGLE_USER_PROFILE_MENU}
  }
}

app.homepage.recently_created.limit = 6

downtime {
  start = ""
  start = ${?DOWNTIME_START}
  duration = 1 hours
  duration = ${?DOWNTIME_DURATION}
}

messaging {
  mode = "kafka"
  mode = ${?MESSAGING_MODE}
  kafka {
    groupIdPrefix = "ota-plus-web"
    groupIdPrefix = ${?KAFKA_GROUP_ID}
    topicSuffix = "dev"
    topicSuffix = ${?KAFKA_TOPIC_SUFFIX}
    host = "localhost:9092"
    host = ${?KAFKA_HOST}
  }
}

akka.kafka.consumer {
  kafka-clients {
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?KAFKA_HOST}
  }
}

trace {
  service-name = "ota-plus-web"

  zipkin {
    base-url = "http://localhost:9411"
    base-url = ${?ZIPKIN_URI}
    sample-rate = 1
  }
}

zipkin-trace-context {
  fork-join-executor {
    parallelism-factor = 20.0
    parallelism-max = 200
  }
}

play.modules.enabled  += "brave.play.module.ZipkinModule"
play.modules.enabled  += ${?NAMESPACE_DIRECTOR_MODULE} # com.advancedtelematic.NamespaceDirectorModule

omniture_source.url = ""
omniture_source.url = ${?OMNITURE_SRC_URL}
