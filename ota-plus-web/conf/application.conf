# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="YM5B6o<ywKn4tTyA;tOZ<2xUEajF4DDi=O/PPm1Q^w2LqtKISd9oqYT6b>>C1gQa"
play.crypto.secret=${?PLAY_CRYPTO_SECRET}

play.http.errorHandler = "OtaPlusErrorHandler"

play.http.filters="OtaPlusFilters"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

play {
  server {
    #disable pidfile so the webserver plays nice with docker
    pidfile.path = "/dev/null"
  }
}


# Remote APIs
core.api.uri = "http://localhost:8080"
core.api.uri = ${?CORE_API_URI}
resolver.api.uri = "http://localhost:8081"
resolver.api.uri = ${?RESOLVER_API_URI}
deviceregistry.api.uri = "http://localhost:8083"
deviceregistry.api.uri = ${?DEVICE_REGISTRY_API_URI}
buildservice.api.host = "http://localhost:9200"
buildservice.api.host = ${?BUILDSERVICE_API_HOST}
# placeholders to be supplied by the app: [vin] , [packagetype] , [arch] , [client_id] , [secret]
buildservice.api.query = "/api/build/[vin]?client_id=[client_id]&secret=[secret]&packagetype=[packagetype]"
buildservice.api.query = ${?BUILDSERVICE_API_QUERY}

authplus {
  host = "http://localhost:9001"
  host = ${?AUTHPLUS_HOST}
  client_id = ${?AUTHPLUS_CLIENT_ID}
  secret = ${?AUTHPLUS_SECRET}

  usersPath = "/users"
}

# optional AWS endpoint:
# endpoint = "ec2.amazonaws.com"
email.endpoint = ${?EMAIL_ENDPOINT}

email.reset_password {
  sender.email = "noreply@advancedtelematic.com"
  subject = "Ota Plus reset password notification"
  # the first %s gets replaced by the server host, the second by the reset token from auth+
  message_body = "Hi,\n\nUse this link to reset your password: <%s/reset_password/%s>.\n\nRegards,\n\t\tATS"
}

test.webserver.host  = "localhost"
test.webserver.host  = ${?DOCKER_IP}
#the default test port is already specified by scalatest
# must not clash with dockerExposedPorts given in SotaBuild of rvi_sota_server
test.webserver.port  = 9010

file.password = "conf/accounts.json"

akka {
  persistence {
    journal {
      plugin = "akka.persistence.journal.inmem" //"cassandra-journal"
      plugin = ${?PERSISTENCE_JOURNAL}
    }
  }
}

play.modules.enabled += "com.advancedtelematic.ota.vehicle.VehiclesModule"

signup {
  secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  secret = ${?INVITE_SECRET}
}

cassandra {
  contact-point = "127.0.0.1"
  contact-point = ${?CASSANDRA_CONTACT_POINT}
}

cassandra-journal {

  # FQCN of the cassandra journal plugin
  class = "akka.persistence.cassandra.journal.CassandraJournal"

  # Comma-separated list of contact points in the cluster.
  # Host:Port pairs are also supported. In that case the port parameter will be ignored.
  contact-points = [${cassandra.contact-point}, ${?CASSANDRA_CONTACT_POINT_1}, ${?CASSANDRA_CONTACT_POINT_2}]

  # Name of the keyspace to be created/used by the journal
  keyspace = "ota_plus_web_journal"
  keyspace = ${?CASSANDRA_JOURNAL_KEYSPACE}
}

cassandra-snapshot-store {

  # FQCN of the cassandra snapshot store plugin
  class = "akka.persistence.cassandra.snapshot.CassandraSnapshotStore"

  # Comma-separated list of contact points in the cluster.
  # Host:Port pairs are also supported. In that case the port parameter will be ignored.
  contact-points = [${cassandra.contact-point}, ${?CASSANDRA_CONTACT_POINT_1}, ${?CASSANDRA_CONTACT_POINT_2}]

  # Name of the keyspace to be created/used by the snapshot store
  keyspace = "ota_plus_web_snapshot"
}

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

auth0 {
  clientSecret=${AUTH0_CLIENT_SECRET}
  clientId=${AUTH0_CLIENT_ID}
  domain=${AUTH0_DOMAIN}
  callbackURL=${AUTH0_CALLBACK_URL}
}
